plot_df = data.frame(even, safe, risk)
ggplot(data = plot_df) +
geom_histogram(aes(risk),fill = 'red4',alpha = 0.9,position="stack")+
geom_histogram(aes(even),fill = 'salmon1',alpha = 0.6,position="stack") +
geom_histogram(aes(safe),fill = 'olivedrab4',alpha = 0.3,position="stack")+
scale_fill_brewer(palette="Spectral")+
xlim(c(-25000,60000))+
xlab('Portfolio Profit/Loss Spread')+
ylab('Frequency')
ggplot(aes(r)) + geom_line() + theme_bw()
get_return = function(initial_wealth,weights,all_returns){
sim_split = foreach(i = 1:5000, .combine = 'rbind') %do% {
total_wealth = initial_wealth
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
#data.frame(ts = all_returns[,1],return = wealthtracker)
wealthtracker
}
#return(sim_split,sim_split[,n_days]- initial_wealth)
return(wealthtracker)
}
weight_uni = rep(0.2,5)
r = data.frame(get_return(100000,weight_uni,all_returns))
ggplot(aes(r)) + geom_line() + theme_bw()
r
get_return = function(initial_wealth,weights,all_returns){
sim_split = foreach(i = 1:5000, .combine = 'rbind') %do% {
total_wealth = initial_wealth
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
#data.frame(ts = all_returns[,1],return = wealthtracker)
wealthtracker
}
return(sim_split[,n_days]- initial_wealth)
#return(wealthtracker)
}
weight_even = rep(0.2,5)
r = data.frame(get_return(100000,weight_uni,all_returns))
r
ggplot(aes(r)) + geom_line() + theme_bw()
r
get_return = function(initial_wealth,weights,all_returns){
sim_split = foreach(i = 1:5000, .combine = 'rbind') %do% {
total_wealth = initial_wealth
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
#data.frame(ts = all_returns[,1],return = wealthtracker)
wealthtracker
}
return(sim_split[,n_days]- initial_wealth)
#return(wealthtracker)
}
weight_even = rep(0.2,5)
even = get_return(100000,weight_uni,all_returns)
#ggplot(aes(r)) + geom_line() + theme_bw()
even
hist(even)
# Import the five ETFs
mystocks = c("SPY", "TLT", "LQD", "EEM", "VNQ")
myprices = getSymbols(mystocks, from = "2007-01-01")
getSymbols(mystocks)
#Get the adjusted closing price of each ETF
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
# Combine all the returns in a matrix
all_returns = cbind(ClCl(LQDa),ClCl(TLTa),ClCl(SPYa), ClCl(VNQa, ClCl(EEMa)))
# Import the five ETFs
mystocks = c("SPY", "TLT", "LQD", "EEM", "VNQ")
myprices = getSymbols(mystocks, from = "2007-01-01")
getSymbols(mystocks)
#Get the adjusted closing price of each ETF
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
# Combine all the returns in a matrix
all_returns = cbind(ClCl(LQDa),ClCl(TLTa),ClCl(SPYa), ClCl(VNQa), ClCl(EEMa)))
# Import the five ETFs
mystocks = c("SPY", "TLT", "LQD", "EEM", "VNQ")
myprices = getSymbols(mystocks, from = "2007-01-01")
getSymbols(mystocks)
#Get the adjusted closing price of each ETF
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
# Combine all the returns in a matrix
all_returns = cbind(ClCl(LQDa),ClCl(TLTa),ClCl(SPYa), ClCl(VNQa), ClCl(EEMa))
all_returns = as.matrix(na.omit(all_returns))
head(all_returns)
# Plot each versus the other for approximate correlation
pairs(all_returns)
# The sample correlation matrix
cor(all_returns)
#The mean and variance
sort(apply(all_returns,2,mean),decreasing = TRUE)
cat("\n")
sort(apply(all_returns,2,var),decreasing = TRUE)
par(mfrow=c(2,3))
hist(all_returns[SPYa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[TLTa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[LQDa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[EEMa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[VNQa], 30, xlim=c(-0.04, 0.04))
initial_wealth = 100000
sim_even_split = foreach(i=1:5000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.2, 0.2, 0.2, 0.2, 0.2) #seperate evenly
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
wealthtracker
}
even_mean <- mean(sim_even_split[,n_days])
even_return <- (mean(sim_even_split[,n_days])-initial_wealth)/initial_wealth
even_5_perc <- quantile(sim_even_split[,n_days], 0.05) - initial_wealth
# Print out results
cat("For an even split investment of $100,000,\nExpected holdings:", even_mean, "\nReturn Rate:", even_return, "\n5% VaR:", even_5_perc)
# Now simulate many different possible scenarios when investing
# over a 4-week (20 trading day) period
initial_wealth = 100000
sim_safe_split = foreach(i=1:5000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.5, 0.3, 0.2, 0, 0) # 0.2 SPY, 0.3 TLT, 0.5 LQD
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights
}
wealthtracker
}
#safe_hist = hist(sim_safe_split[,n_days]- initial_wealth, breaks=30)
safe_mean <- mean(sim_safe_split[,n_days])
safe_return <- (mean(sim_safe_split[,n_days])-initial_wealth)/initial_wealth
safe_5_perc <- quantile(sim_safe_split[,n_days], 0.05) - initial_wealth
# Print out results
cat("For an safer split investment of $100,000,\nExpected holdings:",safe_mean, "\nReturn Rate:", safe_return, "\n5% VaR:", safe_5_perc)
initial_wealth = 100000
sim_risky_split = foreach(i=1:5000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0, 0, 0, 0.3, 0.7) #0.7 EEM, 0.3 VNQ
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights
}
wealthtracker
}
#risk_hist = hist(sim_risky_split[,n_days]- initial_wealth, breaks=30)
risky_mean <- mean(sim_risky_split[,n_days])
risky_return <- (mean(sim_risky_split[,n_days])-initial_wealth)/initial_wealth
risky_5_perc <- quantile(sim_risky_split[,n_days], 0.05) - initial_wealth
# Print out results
cat("For a risky split investment of $100,000,\nExpected holdings:", risky_mean, "\nReturn Rate:", risky_return, "\n5% VaR:", risky_5_perc)
even = sim_even_split[,n_days]- initial_wealth
safe = sim_safe_split[,n_days]- initial_wealth
risk = sim_risky_split[,n_days]- initial_wealth
plot_df = data.frame(even, safe, risk)
ggplot(data = plot_df) +
geom_histogram(aes(risk),fill = 'red4',alpha = 0.9,position="stack")+
geom_histogram(aes(even),fill = 'salmon1',alpha = 0.6,position="stack") +
geom_histogram(aes(safe),fill = 'olivedrab4',alpha = 0.3,position="stack")+
scale_fill_brewer(palette="Spectral")+
xlim(c(-25000,60000))+
xlab('Portfolio Profit/Loss Spread')+
ylab('Frequency')
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
i[-1] = i[-1] -0.1
return(weight)
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
i[-1] = i[-1] - 0.1
weight
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
i[-1] = i[-1] - 0.1
print(weight)
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
weight[i] = weight[i] + 0.1
weight[i+1] = weight[i+1]-0.1
print(weight)
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
# weight[i] = weight[i] + 0.1
weight[i+1] = weight[i+1]-0.1
print(weight)
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
for (j in 1:5){
weight[i] = weight[i] + 0.1
weight[i+j] = weight[i+j]-0.1
print(weight)
}
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
weight[i] = weight[i] + 0.1
for (j in 1:5){
weight[i+j] = weight[i+j]-0.1
print(weight)
}
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
weight[-i] = weight[-i] + 0.1
for (j in 1:5){
weight[i+j] = weight[i+j]-0.1
print(weight)
}
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
weight[-i] = weight[-i] + 0.1
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
weight[-i] = weight[-i] + 0.1
}
print(weight)
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in weight){
weight[-i] = weight[-i] + 0.1
print(weight)
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in 1:5){
weight[-i] = weight[-i] + 0.1
print(weight)
}
weight = c(0.2,0.2,0.2,0.2,0.2)
for(i in 1:5){
weight[i] = weight[i] + 0.1
print(weight)
}
weight = c(0,0,0,0,1)
for(i in 1:5){
weight[i] = weight[i] + 0.1
print(weight)
}
weight = c(0,0,0,0,1)
for(i in 1:5){
weight[i] = weight[i] + 0.1
weight[-i] = weight[-i]-0.1
print(weight)
}
weight = c(0,0,0,0,1)
for(i in 10){
weight[5] = weight[5] -0.1
weight[4] = weight[4]+0.1
weight[3] = weight[3]+0.1
print(weight)
}
weight = c(0,0,0,0,1)
for(i in 1:10){
weight[5] = weight[5] -0.1
weight[4] = weight[4]+0.1
weight[3] = weight[3]+0.1
print(weight)
}
weight = c(0,0,0,0,1)
for(i in 1:10){
weight[5] = weight[5] -0.1
weight[4] = weight[5] - 0.1
weight[3] = weight[4] -0.1
print(weight)
}
weight = c(0,0,0,0,1)
for(i in 1:10){
weight[5] = weight[5] -0.1
weight[4] = weight[5] - 0.1
weight[3] = weight[4] - 0.1
weight[2] = weight[3] - 0.1
weight[1] = weight[2] - 0.1
print(weight)
}
weight_even = rep(0.2,5)
get_return(100000,weight_even,all_returns)
get_return = function(initial_wealth,weights,all_returns){
sim_split = foreach(i = 1:5000, .combine = 'rbind') %do% {
total_wealth = initial_wealth
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
#data.frame(ts = all_returns[,1],return = wealthtracker)
wealthtracker
}
return(quantile(sim_split[,n_days], 0.05) - initial_wealth)
}
weight_even = rep(0.2,5)
even = get_return(100000,weight_uni,all_returns)
weight_even = rep(0.2,5)
get_return(100000,weight_even,all_returns)
weight = runif(5)
weight
weight = runif(5)
weight / sum(weight)
weight = runif(5)
a = weight / sum(weight)
sum(a)
weight = runif(5)
weight = weight / sum(weight)
weight = runif(5)
weight = weight / sum(weight)
for (i in 1:3){
weight = runif(5)
weight = weight / sum(weight)
initial_wealth = 100000
get_return(initial_wealth,weight,all_returns)
cat('VaR of the portfolio is: ')
readline()
}
library(mosaic)
library(quantmod)
library(foreach)
# Import the five ETFs
mystocks = c("SPY", "TLT", "LQD", "EEM", "VNQ")
myprices = getSymbols(mystocks, from = "2007-01-01")
getSymbols(mystocks)
#Get the adjusted closing price of each ETF
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
# Combine all the returns in a matrix
all_returns = cbind(ClCl(LQDa),ClCl(TLTa),ClCl(SPYa), ClCl(VNQa), ClCl(EEMa))
all_returns = as.matrix(na.omit(all_returns))
head(all_returns)
# Plot each versus the other for approximate correlation
pairs(all_returns)
# The sample correlation matrix
cor(all_returns)
#The mean and variance
sort(apply(all_returns,2,mean),decreasing = TRUE)
cat("\n")
sort(apply(all_returns,2,var),decreasing = TRUE)
par(mfrow=c(2,3))
hist(all_returns[SPYa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[TLTa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[LQDa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[EEMa], 30, xlim=c(-0.04, 0.04))
hist(all_returns[VNQa], 30, xlim=c(-0.04, 0.04))
initial_wealth = 100000
sim_even_split = foreach(i=1:5000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.2, 0.2, 0.2, 0.2, 0.2) #seperate evenly
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
wealthtracker
}
even_mean <- mean(sim_even_split[,n_days])
even_return <- (mean(sim_even_split[,n_days])-initial_wealth)/initial_wealth
even_5_perc <- quantile(sim_even_split[,n_days], 0.05) - initial_wealth
# Print out results
cat("For an even split investment of $100,000,\nExpected holdings:", even_mean, "\nReturn Rate:", even_return, "\n5% VaR:", even_5_perc)
# Now simulate many different possible scenarios when investing
# over a 4-week (20 trading day) period
initial_wealth = 100000
sim_safe_split = foreach(i=1:5000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.5, 0.3, 0.2, 0, 0) # 0.2 SPY, 0.3 TLT, 0.5 LQD
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights
}
wealthtracker
}
#safe_hist = hist(sim_safe_split[,n_days]- initial_wealth, breaks=30)
safe_mean <- mean(sim_safe_split[,n_days])
safe_return <- (mean(sim_safe_split[,n_days])-initial_wealth)/initial_wealth
safe_5_perc <- quantile(sim_safe_split[,n_days], 0.05) - initial_wealth
# Print out results
cat("For an safer split investment of $100,000,\nExpected holdings:",safe_mean, "\nReturn Rate:", safe_return, "\n5% VaR:", safe_5_perc)
initial_wealth = 100000
sim_risky_split = foreach(i=1:5000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0, 0, 0, 0.3, 0.7) #0.7 EEM, 0.3 VNQ
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights
}
wealthtracker
}
#risk_hist = hist(sim_risky_split[,n_days]- initial_wealth, breaks=30)
risky_mean <- mean(sim_risky_split[,n_days])
risky_return <- (mean(sim_risky_split[,n_days])-initial_wealth)/initial_wealth
risky_5_perc <- quantile(sim_risky_split[,n_days], 0.05) - initial_wealth
# Print out results
cat("For a risky split investment of $100,000,\nExpected holdings:", risky_mean, "\nReturn Rate:", risky_return, "\n5% VaR:", risky_5_perc)
even = sim_even_split[,n_days]- initial_wealth
safe = sim_safe_split[,n_days]- initial_wealth
risk = sim_risky_split[,n_days]- initial_wealth
plot_df = data.frame(even, safe, risk)
ggplot(data = plot_df) +
geom_histogram(aes(risk),fill = 'red4',alpha = 0.9,position="stack")+
geom_histogram(aes(even),fill = 'salmon1',alpha = 0.6,position="stack") +
geom_histogram(aes(safe),fill = 'olivedrab4',alpha = 0.3,position="stack")+
scale_fill_brewer(palette="Spectral")+
xlim(c(-25000,60000))+
xlab('Portfolio Profit/Loss Spread')+
ylab('Frequency')
get_return = function(initial_wealth,weights,all_returns){
sim_split = foreach(i = 1:5000, .combine = 'rbind') %do% {
total_wealth = initial_wealth
holdings = weights * total_wealth
n_days = 20
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today #p+r(stock)
total_wealth = sum(holdings)#p+r(portfolio)
wealthtracker[today] = total_wealth
holdings = total_wealth * weights #daily rebalance
}
wealthtracker
}
return(quantile(sim_split[,n_days], 0.05) - initial_wealth)
}
#weight_even = rep(0.2,5)
#even = get_return(100000,weight_uni,all_returns)
weight = runif(5)
weight = weight / sum(weight)
for (i in 1:3){
weight = runif(5)
weight = weight / sum(weight)
initial_wealth = 100000
VaR = get_return(initial_wealth,weight,all_returns)
cat('The portfolio weight is: ')
print(weight)
cat('VaR of the portfolio is: ')
print(VaR)
}
knitr::opts_chunk$set(echo = TRUE)
#P(TC|Y) = P(TC|Y) * P(Y) /
#            ( P(TC|Y) * P(Y) + P(TC|N) * P(N) )
(0.5/0.65) * 0.65 / ((0.5/0.65) * 0.65 + (0.2/0.35) * 0.35)
